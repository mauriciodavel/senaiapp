package view;

import view.AuditoryView;
import session.Session;
import model.Cliente;
import javax.swing.JInternalFrame;
import java.beans.PropertyVetoException;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class PrincipalView extends javax.swing.JFrame {

    private Timer clockTimer;
    private final DateTimeFormatter BR_FMT = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");

    private void startClock() {
        // Atualiza imediatamente
        lblPrincipalData.setText(LocalDateTime.now().format(BR_FMT));

        // Atualiza a cada 1 segundo (Timer do Swing roda no EDT)
        clockTimer = new Timer(1000, e
                -> lblPrincipalData.setText(LocalDateTime.now().format(BR_FMT))
        );
        clockTimer.setInitialDelay(0);
        clockTimer.start();
    }

    private void stopClock() {
        if (clockTimer != null && clockTimer.isRunning()) {
            clockTimer.stop();
        }
    }

    private void abrirClienteNoDesktop() {
        // Envolve a ClienteView (JFrame) em um JInternalFrame
        view.ClienteView tela = new view.ClienteView(); // já cria com controller etc.

        JInternalFrame internal = new JInternalFrame(
                "Cadastro de Clientes", true, true, true, true);

        // Usa o conteúdo da ClienteView como conteúdo do InternalFrame
        internal.setContentPane(tela.getContentPane());
        internal.pack();
        internal.setVisible(true);

        desktopPanel.add(internal);
        try {
            internal.setSelected(true);
        } catch (PropertyVetoException ex) {
            // se não puder selecionar, ignoramos
        }
    }
    
    private void abrirAuditNoDesktop() {
        // Envolve a ClienteView (JFrame) em um JInternalFrame
        view.AuditoryView tela = new view.AuditoryView(); // já cria com controller etc.

        JInternalFrame internal = new JInternalFrame(
                "Auditoria", true, true, true, true);

        // Usa o conteúdo da ClienteView como conteúdo do InternalFrame
        internal.setContentPane(tela.getContentPane());
        internal.pack();
        internal.setVisible(true);

        desktopPanel.add(internal);
        try {
            internal.setSelected(true);
        } catch (PropertyVetoException ex) {
            // se não puder selecionar, ignoramos
        }
    }

    private void sairAplicacao() {
        int op = JOptionPane.showConfirmDialog(
                this,
                "Deseja realmente sair?",
                "Sair",
                JOptionPane.YES_NO_OPTION);
        if (op == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }

    /**
     * Creates new form PrincipalView
     */
    public PrincipalView() {
        initComponents();
        // Usuário logado (Session foi setada no login)
        Cliente u = Session.getUsuario();
        lblPricipalUsuario.setText(u != null ? u.getNome() : "Usuário");

        // Data/hora em formato PT-BR (ex.: 14/09/2025 23:05)
        DateTimeFormatter f = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
        lblPrincipalData.setText(LocalDateTime.now().format(f));

        // Ações de menu
        menCadCli.addActionListener(e -> abrirClienteNoDesktop());
        menOpcAudit.addActionListener(e -> abrirAuditNoDesktop());
        menOpcSair.addActionListener(e -> sairAplicacao());
        // inicia o relógio
        startClock();

        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                stopClock();
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        desktopPanel = new javax.swing.JDesktopPane();
        lblPricipalUsuario = new javax.swing.JLabel();
        lblPrincipalData = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menCad = new javax.swing.JMenu();
        menCadCli = new javax.swing.JMenuItem();
        menRel = new javax.swing.JMenu();
        menRelCli = new javax.swing.JMenuItem();
        menOpc = new javax.swing.JMenu();
        menOpcAjuda = new javax.swing.JMenuItem();
        menOpcTema = new javax.swing.JMenuItem();
        menOpcSair = new javax.swing.JMenuItem();
        menOpcAudit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1930, 1030));

        desktopPanel.setPreferredSize(new java.awt.Dimension(1600, 1030));

        javax.swing.GroupLayout desktopPanelLayout = new javax.swing.GroupLayout(desktopPanel);
        desktopPanel.setLayout(desktopPanelLayout);
        desktopPanelLayout.setHorizontalGroup(
            desktopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1451, Short.MAX_VALUE)
        );
        desktopPanelLayout.setVerticalGroup(
            desktopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1030, Short.MAX_VALUE)
        );

        lblPricipalUsuario.setText("lblUsuario");

        lblPrincipalData.setText("lblData");

        jLabel1.setText("Usuário:");

        jLabel2.setText("Data:");

        menCad.setText("Cadastro");

        menCadCli.setText("Clientes");
        menCad.add(menCadCli);

        jMenuBar1.add(menCad);

        menRel.setText("Relatório");

        menRelCli.setText("Clientes");
        menRel.add(menRelCli);

        jMenuBar1.add(menRel);

        menOpc.setText("Opções");

        menOpcAjuda.setText("Ajuda");
        menOpc.add(menOpcAjuda);

        menOpcTema.setText("Tema de Tela");
        menOpc.add(menOpcTema);

        menOpcSair.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_DOWN_MASK));
        menOpcSair.setText("Sair");
        menOpc.add(menOpcSair);

        menOpcAudit.setText("Auditoria (Log)");
        menOpc.add(menOpcAudit);

        jMenuBar1.add(menOpc);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(desktopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1451, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPricipalUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPrincipalData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(desktopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPricipalUsuario)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPrincipalData)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrincipalView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrincipalView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrincipalView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrincipalView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PrincipalView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane desktopPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JLabel lblPricipalUsuario;
    private javax.swing.JLabel lblPrincipalData;
    private javax.swing.JMenu menCad;
    private javax.swing.JMenuItem menCadCli;
    private javax.swing.JMenu menOpc;
    private javax.swing.JMenuItem menOpcAjuda;
    private javax.swing.JMenuItem menOpcAudit;
    private javax.swing.JMenuItem menOpcSair;
    private javax.swing.JMenuItem menOpcTema;
    private javax.swing.JMenu menRel;
    private javax.swing.JMenuItem menRelCli;
    // End of variables declaration//GEN-END:variables
}
